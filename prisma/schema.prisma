// prisma/schema.prisma
datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider        = "prisma-client-js"
    // output          = "../node_modules/.prisma/client"
    previewFeatures = ["driverAdapters"]
}

model User {
    id                 Int      @id @default(autoincrement())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @default(now())
    lastCheckedProfile DateTime @default(now())
    privyId            String   @unique
    address            String
    socialHandle       String   @unique
    socialPlatform     String
    facecoinCode       String   @unique
    followerCount      Int?
    pfp                String?
    tokenAllocation    String?
    pokesGiven         Poke[]   @relation("pokesGiven")
    pokesReceived      Poke[]   @relation("pokesReceived")
}

model StylizePhotoInput {
    id                   Int      @id @default(1)
    updatedAt            DateTime @updatedAt
    prompt               String
    num_steps            Int
    style_name           String
    num_outputs          Int
    guidance_scale       Float
    negative_prompt      String
    style_strength_ratio Float
}

model AllocatorSettings {
    id                 Int      @id @default(1)
    updatedAt          DateTime @updatedAt
    followerTiers      Json // Record<FollowerTier, number>
    baseAllocations    Json // Record<CategoryKey, number>
    minimumAllocations Json // Record<CategoryKey, number>
    decayFactor        Float    @default(0.99)
}

model Poke {
    id            Int         @id @default(autoincrement())
    between       String      @unique // For maintaining the total count between two users
    count         Int
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    perpetrator   User        @relation("pokesGiven", fields: [perpetratorId], references: [id])
    perpetratorId Int
    victim        User        @relation("pokesReceived", fields: [victimId], references: [id])
    victimId      Int
    events        PokeEvent[]

    @@index([between])
}

model PokeEvent {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    poke          Poke     @relation(fields: [pokeId], references: [id])
    pokeId        Int
    perpetratorId Int
    victimId      Int

    @@index([perpetratorId])
    @@index([victimId])
    @@index([createdAt])
}
